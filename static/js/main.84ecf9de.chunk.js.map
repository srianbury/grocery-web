{"version":3,"sources":["Components/Spinner/index.js","Components/Error/index.js","Components/Login/index.js","Components/Authentication/index.js","Components/GroceryMain/index.js","Components/Header/index.js","Components/App/index.js","Components/Root/index.js","serviceWorker.js","index.js"],"names":["Spinner","className","role","Error","message","SignUpContainer","handleToggle","setUser","useContext","AuthenticationContext","SignupSchema","yup","shape","username","min","max","required","email","password","verifyPassword","test","this","parent","handleSignUp","values","a","setStatus","setSubmitting","fetch","process","method","headers","body","JSON","stringify","response","json","result","status","formik","useFormik","initialValues","validationSchema","onSubmit","SignUpView","handleSubmit","htmlFor","name","type","placeholder","value","onChange","handleChange","onBlur","handleBlur","touched","errors","disabled","isSubmitting","onClick","LoginContainer","LoginSchema","LoginView","LoginBase","useState","alreadyAUser","setAlreadyAUser","prev","React","createContext","Authentication","children","user","loading","state","setState","useEffect","localStorage","getItem","parse","Provider","setItem","removeItem","Login","AppContainer","App","list","error","read","Authorization","token","handleRetry","setTimeout","id","cb","filter","item","_id","handleRemoveItem","handleRemoveAll","ListView","length","map","key","ClearList","ListItemContainer","deleting","setDeleting","ListItemView","HeaderView","handleLogout","HeaderContainer","Header","GroceryMain","Root","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.84ecf9de.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Spinner = () => (\n  <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n    <span className=\"sr-only\">Loading...</span>\n  </div>\n);\n\nexport default Spinner;\n","import React from 'react'\n\nconst Error = ({ message }) => <div className=\"text-danger\">{message}</div>;\n\nexport default Error","import React, { useState, useContext } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { AuthenticationContext } from \"../Authentication\";\nimport Spinner from \"../Spinner\";\nimport Error from \"../Error\";\n\nconst LoginBase = () => {\n  const [alreadyAUser, setAlreadyAUser] = useState(true);\n  function handleToggle() {\n    setAlreadyAUser(prev => !prev);\n  }\n  return (\n    <div>\n      {alreadyAUser ? (\n        <LoginContainer handleToggle={handleToggle} />\n      ) : (\n        <SignUpContainer handleToggle={handleToggle} />\n      )}\n    </div>\n  );\n};\n\nconst SignUpContainer = ({ handleToggle }) => {\n  const { setUser } = useContext(AuthenticationContext);\n\n  const SignupSchema = yup.object().shape({\n    username: yup\n      .string()\n      .min(2, \"Username must be at least 2 characters\")\n      .max(21, \"Username must be less than 21 characters\")\n      .required(\"Required\"),\n    email: yup\n      .string()\n      .email(\"Invalid email\")\n      .required(\"Required\"),\n    password: yup\n      .string()\n      .min(10, \"Password must be at least 10 characters\")\n      .max(30, \"Password must be less than 30 characters\")\n      .required(\"Required\"),\n    verifyPassword: yup\n      .mixed()\n      .test(\"match\", \"Passwords do not match.\", function() {\n        return this.parent.password === this.parent.verifyPassword;\n      })\n  });\n\n  async function handleSignUp(values, { setStatus, setSubmitting }) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/signup`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: values.username,\n          password: values.password,\n          email: values.email\n        })\n      });\n      const result = await response.json();\n      if (response.status === 200) {\n        setUser(result);\n      }\n\n      if (response.status === 400) {\n        setStatus({\n          message: result.message\n        });\n      }\n    } catch (e) {\n      setStatus({\n        message: \"Sign up failed.\" // TODO: add more specific reason here\n      });\n      setSubmitting(false);\n    }\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n      password: \"\",\n      email: \"\",\n      verifyPassword: \"\"\n    },\n    validationSchema: SignupSchema,\n    onSubmit: handleSignUp\n  });\n\n  return (\n    <SignUpView\n      formik={formik}\n      handleSignUp={handleSignUp}\n      handleToggle={handleToggle}\n    />\n  );\n};\n\nconst SignUpView = ({ formik, handleToggle }) => (\n  <div className=\"d-flex justify-content-center\">\n    <form onSubmit={formik.handleSubmit}>\n      <h1>Sign Up</h1>\n\n      {formik.status && <Error message={formik.status.message} />}\n\n      <div className=\"form-group\">\n        <label htmlFor=\"username\">Username</label>\n        <input\n          name=\"username\"\n          type=\"text\"\n          placeholder=\"Username\"\n          className=\"form-control\"\n          value={formik.values.username}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n        />\n        {formik.touched.username && formik.errors.username && (\n          <Error message={formik.errors.username} />\n        )}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"email\">Email</label>\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Email\"\n          className=\"form-control\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n        />\n        {formik.touched.email && formik.errors.email && (\n          <Error message={formik.errors.email} />\n        )}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"username\">Password</label>\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          className=\"form-control\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n        />\n        {formik.touched.password && formik.errors.password && (\n          <Error message={formik.errors.password} />\n        )}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"verifyPassword\">Verify Password</label>\n        <input\n          name=\"verifyPassword\"\n          type=\"password\"\n          placeholder=\"Verify Password\"\n          className=\"form-control\"\n          value={formik.values.verifyPassword}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n        />\n        {formik.touched.verifyPassword && formik.errors.verifyPassword && (\n          <Error message={formik.errors.verifyPassword} />\n        )}\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary\"\n        disabled={formik.isSubmitting}\n      >\n        {formik.isSubmitting ? <Spinner /> : \"Sign Up\"}\n      </button>\n\n      <div>\n        Already a user?{\" \"}\n        <button type=\"button\" className=\"btn btn-link\" onClick={handleToggle}>\n          Sign up\n        </button>\n      </div>\n    </form>\n  </div>\n);\n\nconst LoginContainer = ({ handleToggle }) => {\n  const { setUser } = useContext(AuthenticationContext);\n\n  const LoginSchema = yup.object().shape({\n    username: yup.string().required(\"Required\"),\n    password: yup.string().required(\"Required\")\n  });\n\n  async function handleLogin(values, { setStatus, setSubmitting }) {\n    try {\n      setStatus(null); // reset status before request\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(values)\n      });\n\n      const result = await response.json();\n      if (response.status === 200) {\n        setUser(result);\n      }\n\n      if (response.status === 400) {\n        setStatus({\n          message: result.message\n        });\n      }\n    } catch (e) {\n      setStatus({\n        message: \"Login failed.\" // TODO: add more specific reason here\n      });\n      setSubmitting(false);\n    }\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n      password: \"\"\n    },\n    validationSchema: LoginSchema,\n    onSubmit: handleLogin\n  });\n\n  return <LoginView formik={formik} handleToggle={handleToggle} />;\n};\n\nconst LoginView = ({ formik, handleToggle }) => (\n  <div className=\"d-flex justify-content-center\">\n    <form onSubmit={formik.handleSubmit}>\n      <h1>Login</h1>\n      {formik.status && <Error message={formik.status.message} />}\n      <div className=\"form-group\">\n        <label htmlFor=\"username\">Username</label>\n        <input\n          name=\"username\"\n          type=\"text\"\n          placeholder=\"Username\"\n          className=\"form-control\"\n          value={formik.values.username}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n        />\n        {formik.touched.username && formik.errors.username && (\n          <Error message={formik.errors.username} />\n        )}\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"password\">Password</label>\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          className=\"form-control\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n        />\n        {formik.touched.password && formik.errors.password && (\n          <Error message={formik.errors.password} />\n        )}\n      </div>\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary\"\n        disabled={formik.isSubmitting}\n      >\n        {formik.isSubmitting ? <Spinner /> : \"Login\"}\n      </button>\n      <div>\n        Don't have an account?{\" \"}\n        <button type=\"button\" className=\"btn btn-link\" onClick={handleToggle}>\n          Sign up\n        </button>\n      </div>\n    </form>\n  </div>\n);\n\nexport default LoginBase;\n","import React, { useState, useEffect } from \"react\";\nimport Login from \"../Login\";\nimport Spinner from \"../Spinner\";\n\n/*\n    user: {\n        user: {\n            _id: string,\n            username: string,\n            _v: int\n        },\n        token: json web token\n    }\n*/\n\nconst USER_LOGIN_KEY = \"user_login_key\";\n\nconst AuthenticationContext = React.createContext(null);\nconst Authentication = ({ children }) => {\n  const [state, setState] = useState({\n    user: null,\n    loading: true\n  });\n\n  useEffect(() => {\n    const user = localStorage.getItem(USER_LOGIN_KEY);\n    if (user) {\n      setState(prev => ({\n        ...prev,\n        user: JSON.parse(user),\n        loading: false\n      }));\n    } else {\n      setState(prev => ({\n        ...prev,\n        loading: false\n      }));\n    }\n  }, []);\n\n  function setUser(user) {\n    setState(prev => ({\n      ...prev,\n      user\n    }));\n    if (user) {\n      localStorage.setItem(USER_LOGIN_KEY, JSON.stringify(user));\n    } else {\n      localStorage.removeItem(USER_LOGIN_KEY);\n    }\n  }\n\n  if (state.loading) {\n    return <Spinner />;\n  }\n\n  return (\n    <AuthenticationContext.Provider\n      value={{\n        user: state.user,\n        setUser\n      }}\n    >\n      {state.user ? children : <Login />}\n    </AuthenticationContext.Provider>\n  );\n};\n\nexport default Authentication;\nexport { AuthenticationContext };\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { AuthenticationContext } from \"../Authentication\";\nimport Spinner from \"../Spinner\";\nimport Error from \"../Error\";\n\nconst AppContainer = ({ children }) => (\n  <div className=\"d-flex justify-content-center\">{children}</div>\n);\n\nconst App = () => {\n  const { user } = useContext(AuthenticationContext);\n  const [state, setState] = useState({\n    list: [],\n    loading: true,\n    error: null\n  });\n\n  async function read() {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/list`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: user.token\n        }\n      });\n      const result = await response.json();\n      setState(prev => ({\n        ...prev,\n        list: result.list\n      }));\n    } catch (e) {\n      setState(prev => ({\n        ...prev,\n        error: \"Unable to load data! :(\"\n      }));\n    } finally {\n      setState(prev => ({\n        ...prev,\n        loading: false\n      }));\n    }\n  }\n\n  useEffect(() => {\n    read();\n    // eslint-disable-next-line\n  }, []);\n\n  function handleRetry() {\n    setState(prev => ({\n      ...prev,\n      error: null,\n      loading: true\n    }));\n    // this was performing too quickly and I wanted to give the feel/visualization that\n    // something was actually happending\n    setTimeout(() => {\n      read();\n    }, 500);\n  }\n\n  async function handleRemoveItem(id, cb) {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/list/${id}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: user.token\n          }\n        }\n      );\n      await response.json();\n      if (response.status !== 200) {\n        throw Error(\"Unhandled Exception\");\n      }\n      setState(prev => ({\n        ...prev,\n        list: prev.list.filter(item => item._id !== id)\n      }));\n    } catch (e) {\n      cb();\n    }\n  }\n\n  async function handleRemoveAll() {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/list`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: user.token\n      }\n    });\n    if (response.status !== 200) {\n      throw Error(\"Unhandled Exception\");\n    }\n    setState(prev => ({\n      ...prev,\n      list: []\n    }));\n  }\n\n  if (state.error) {\n    return (\n      <div>\n        <Error message={state.error} />\n        <div className=\"d-flex justify-content-center mt-2 mb-2\">\n          <button\n            type=\"button\"\n            className=\"btn btn-sm btn-primary\"\n            onClick={handleRetry}\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (state.loading) {\n    return <Spinner />;\n  }\n\n  return (\n    <div>\n      <span>\n        <h3 className=\"d-inline-block mr-2\">Grocery List</h3>\n        <button\n          type=\"button\"\n          className=\"btn btn-sm btn-primary\"\n          onClick={handleRetry}\n        >\n          Refresh\n        </button>\n      </span>\n      <ListView\n        list={state.list}\n        handleRemoveItem={handleRemoveItem}\n        handleRemoveAll={handleRemoveAll}\n      />\n    </div>\n  );\n};\n\nconst ListView = ({ list, handleRemoveItem, handleRemoveAll }) => (\n  <div>\n    {list.length === 0 && <div>Your list is empty!</div>}\n    <div className=\"card\">\n      <ul className=\"list-group list-group-flush\">\n        {list.map(item => (\n          <ListItemContainer\n            key={item._id}\n            id={item._id}\n            name={item.name}\n            handleRemoveItem={handleRemoveItem}\n          />\n        ))}\n      </ul>\n    </div>\n    {list.length > 0 && <ClearList handleRemoveAll={handleRemoveAll} />}\n  </div>\n);\n\nconst ClearList = ({ handleRemoveAll }) => (\n  <div className=\"d-flex justify-content-end mt-3\">\n    <button\n      type=\"button\"\n      className=\"btn btn-sm btn-danger\"\n      onClick={handleRemoveAll}\n    >\n      Clear List\n    </button>\n  </div>\n);\n\nconst ListItemContainer = ({ id, name, handleRemoveItem }) => {\n  const [deleting, setDeleting] = useState(false);\n  function handleRemove() {\n    setDeleting(true);\n    handleRemoveItem(id, () => setDeleting(false));\n  }\n  if (deleting) {\n    return (\n      <li className=\"list-group-item\">\n        <Spinner />\n      </li>\n    );\n  }\n  return <ListItemView id={id} name={name} handleRemoveItem={handleRemove} />;\n};\n\nconst ListItemView = ({ id, name, handleRemoveItem }) => (\n  <li className=\"list-group-item\">\n    <div className=\"d-flex justify-content-between\">\n      <div>{name}</div>\n      <button\n        type=\"button\"\n        className=\"btn btn-sm btn-danger\"\n        onClick={() => handleRemoveItem(id)}\n      >\n        Delete\n      </button>\n    </div>\n  </li>\n);\n\nexport default () => (\n  <AppContainer>\n    <App />\n  </AppContainer>\n);\n","import React, { useContext } from \"react\";\nimport { AuthenticationContext } from \"../Authentication\";\n\nconst HeaderContainer = () => {\n  const { user, setUser } = useContext(AuthenticationContext);\n  function handleLogout() {\n    setUser(null);\n  }\n  return (\n    <HeaderView username={user.user.username} handleLogout={handleLogout} />\n  );\n};\n\nconst HeaderView = ({ username, handleLogout }) => (\n  <div className=\"d-flex justify-content-end ml-3 mr-3\">\n    <div className=\"pr-1\">{username}</div>\n    <button\n      type=\"button\"\n      className=\"btn btn-sm btn-secondary\"\n      onClick={handleLogout}\n    >\n      Logout\n    </button>\n  </div>\n);\n\nexport default HeaderContainer;\n","import React from 'react'\nimport GroceryMain from '../GroceryMain'\nimport Header from '../Header'\n\nconst App = () => (\n    <div>\n        <Header />\n        <GroceryMain />\n    </div>\n)\n\nexport default App;\n","import React from \"react\";\nimport App from \"../App\";\nimport Authentication from \"../Authentication\";\n\nconst Root = () => (\n  <div className=\"mt-2\">\n    <Authentication>\n      <App />\n    </Authentication>\n  </div>\n);\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Root from \"./Components/Root\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}